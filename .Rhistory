library(swirl)
swirl()
cmat
points(cx,cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx, finalCy, col=cols1, pch=9, ces=2, lwd=2)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3 )
plot(x,y, col=kmeans(dataFrame,6)$cluster), pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
swirl()
image(head(dataMatrix))
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R, local=TRUE")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale of mat)
scale(mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2[,1:2]
svd2[v[,1:2]]
svd2$v[,1:2]
svd2[d]
svd2(d)
svd2(d)
svd2
svd2$d
dim(faceData)
svd1$u[,1] %*% svd1$v[,1] * svd1$d[1]
a1<- svd1$u[,1] %*% svd1$v[,1] * svd1$d[1]
a1<- svd1$u[,1]* svd1$d[1] %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2<- svd1$u[,1:2] %*% svd1$d[1:2]%*% t(svd$v[,1:2])
a2<- svd1$u[,1:2] %*% t(svd$v[,1:2]) %*% svd1$d[1:2]
a2<- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% svd1$d[1:2]
a2<- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% diag(svd1$d[1:2])
a2<- svd1$u[,1:2] %*% diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
myImage<- svd1$u[,1:5] %*% diag(svd1$d[1:5])%*%t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*%
| t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
info()
skip()
swirl()
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
80.000*1,01ˆ10
80.000*1.01ˆ10
1.01ˆ10
2ˆ3
2^3
80,000* 1.01^10
80000* 1.01^10
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<- dist(x[,1:3])
mdist<- dist(sub1[,1:3])
hclustering<- hclus(mdist)
hclustering<- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist<- dist(sub1[,10:12])
hclustering<- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1<- scale(sub1[,-c(562,563)])
svd1<- svd(scale(sub1[,-c(562,563)])
)
dim(svd1$u)
maxCon<- which.max(svd1$v[,2])
mdist <- dist(sub1[,c((10:12),maxCon])
mdist <- dist(sub1[,c((10:12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(x$y)
dim(kClust$cluster$y)
dim(kClust$cluster)
dim(kClust$centers)
laying<- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<- which(kClust$size==249)
walkdown<- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
libarary(swirl)
library(swirl)
swirl()
x0 <- m$Sample.Value
x0 <- m$Sample.Value
0
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
x0 <- pm0$Sample.Value
0
exit
info()
main()
dim(pm0)
head(pm0)
cnames
cnames<- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0)<- make.names(cnames[[1]][wcol])
head(pm0)
x0<- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<- make.names(cnames[[1]][wcol])
dim(pm1)
x1<- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- (x1<0)
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=T)
mean(negative, na.rm=TRUE)
dates<- pm1$Date
str(dates)
dates<- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both<- intersect(site0,site1)
both
head(pm0)
cnt0<- subset(pm0, State.Code==36, county.site%in%both)
cnt0<- subset(pm0, State.Code==36& county.site%in%both)
cnt1<- subset(pm1, State.Code==36& county.site%in%both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub<- subset(cnt0, County.Code==63 & Site.Id==2008)
pm0sub<- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub<- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub<- pm0sub$Sample.Value
x1sub<- pm1sub$Sample.Value
dates0<- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1<- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(median(x0sub), lwd=2,na.rm=TRUE)
abline(median(x0sub, na.rm=TRUE), lwd=2)
abline(h=median(x0sub, na.rm=TRUE), lwd=2)
plot(dates1,x1sub, pch=20)
abline(h=median(x1sub, na.rm=TRUE), lwd=2)
rng<-(x0sub, x1sub, na.rm=TRUE)
rng<-range(x0sub, x1sub, na.rm=TRUE)
rng
mn0<- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1<- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0, mean=mn0))
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg(d0, d1, by="state")
mergg(d0, d1, by="state")
merge(d0, d1, by="state")
mrg<- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5))
)
with(mrg,points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x< mrg$mean.y,]
setwd("~/Desktop/coursera/Datascience_cursus_5/PeerAssess1RR")
Monitor<- read.csv("activity.csv")
library(dplyr)
library(plyr)
library(Hmisc)
a<- aggregate(steps ~ date, Monitor, sum)
a$date <- as.Date(a$date)
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
summary(a$steps)
##Read and process the data - Cours 5, Project 1
Monitor<- read.csv("activity.csv")
## Sum steps per day
a<- aggregate(steps ~ date, Monitor, sum)
a$date <- as.Date(a$date)
## make a histogram of total number of steps by day
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
## mean and median number of steps taken each day
summary(a$steps)
## median is 10760 and mean = 10770
##average number of steps: show median and main
abline(v=c(median(a$steps),mean(a$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
b<- aggregate(steps ~ interval, Monitor, mean)
plot(b$interval, b$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
library(dplyr)
filter(b, steps==max(b$steps))
##interval    steps
##   835      206.1698
## The number of rows with missing values in the dataset
nrow(Monitor)-sum(complete.cases(Monitor))
Monitor2<- read.csv("activity.csv")
Monitor2$steps[is.na(Monitor2$steps)] <- ave(Monitor2$steps, Monitor2$interval,
FUN = function(x)
mean(x, na.rm = TRUE))[c(which(is.na(Monitor2$steps)))]
c<- aggregate(steps ~ date, Monitor2, sum)
c$date <- as.Date(c$date)
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
summary(c$steps)
abline(v=c(median(c$steps),mean(c$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
d<- aggregate(steps ~ interval, Monitor2, mean)
plot(d$interval, d$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
filter(d, steps==max(d$steps))
par(mfrow=c(1,2), mar=c(4,4,2,1))
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## The histograms show that imputing missing values results in
## a higher count for number of steps that has the highest occurance
## Create panel plot that compares average no. steps taken
## per 5 minute interval across weekdays and week
## Add column with weekdays to the dataset with imputed values
Monitor2ex<- mutate(Monitor2,day=weekdays(c$date))
Monitor2exweekend<- filter(Monitor2ex,day==c("zaterdag","zondag"))
Monitor2exweekdays<- Monitor2ex[!(Monitor2ex$day %in% Monitor2exweekend$day),]
d_weekend<- aggregate(steps ~ interval, Monitor2exweekend, mean)
d_weekdays<- aggregate(steps ~ interval, Monitor2exweekdays, mean)
par(mfrow=c(1,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(d_weekend$interval, d_weekend$steps, type="l", col="orange",main="Weekend", xlab="Interval", ylab="Number of steps",cex=1, ylim=range(c(d_weekend$steps, d_weekdays$steps)))
plot(d_weekdays$interval, d_weekdays$steps, type="l", col="orange",main="Weekdays", xlab="Interval", ylab="Number of steps", cex=1, ylim=range(c(d_weekend$steps, d_weekdays$steps)))
##Read and process the data - Cours 5, Project 1
Monitor<- read.csv("activity.csv")
## Sum steps per day
a<- aggregate(steps ~ date, Monitor, sum)
a$date <- as.Date(a$date)
## make a histogram of total number of steps by day
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
## mean and median number of steps taken each day
summary(a$steps)
## median is 10760 and mean = 10770
##average number of steps: show median and main
abline(v=c(median(a$steps),mean(a$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
b<- aggregate(steps ~ interval, Monitor, mean)
plot(b$interval, b$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
library(dplyr)
filter(b, steps==max(b$steps))
##interval    steps
##   835      206.1698
## The number of rows with missing values in the dataset
nrow(Monitor)-sum(complete.cases(Monitor))
## 2304
## A strategy for imputing missing values is to impute with
## the mean value of the same interval
Monitor2<- read.csv("activity.csv")
Monitor2$steps[is.na(Monitor2$steps)] <- ave(Monitor2$steps, Monitor2$interval,
FUN = function(x)
mean(x, na.rm = TRUE))[c(which(is.na(Monitor2$steps)))]
## Monitor2 is now the new dataset with missing data filled in
## Sum steps per day
c<- aggregate(steps ~ date, Monitor2, sum)
c$date <- as.Date(c$date)
## make a histogram of total number of steps by day
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## mean and median number of steps taken each day
summary(c$steps)
## median is 10770 (in stead of 10760 as before) and mean = 10770 (as before)
##average number of steps: show median and main
abline(v=c(median(c$steps),mean(c$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
d<- aggregate(steps ~ interval, Monitor2, mean)
plot(d$interval, d$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
filter(d, steps==max(d$steps))
##interval    steps
##   835      206.1698 (exactly the same as before)
## total number of steps taken with imputed data vs
# without imputed data
par(mfrow=c(1,2), mar=c(4,4,2,1))
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## The histograms show that imputing missing values results in
## a higher count for number of steps that has the highest occurance
## Create panel plot that compares average no. steps taken
## per 5 minute interval across weekdays and weekends.
## Add column with weekdays to the dataset with imputed values
Monitor2ex<- mutate(Monitor2,day=weekdays(c$date))
Monitor2exweekend<- filter(Monitor2ex,day==c("zaterdag","zondag"))
Monitor2exweekdays<- Monitor2ex[!(Monitor2ex$day %in% Monitor2exweekend$day),]
d_weekend<- aggregate(steps ~ interval, Monitor2exweekend, mean)
d_weekdays<- aggregate(steps ~ interval, Monitor2exweekdays, mean)
## plot panel with 2 pictures
par(mfrow=c(1,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(d_weekend$interval, d_weekend$steps, type="l", col="orange",main="Weekend", xlab="Interval", ylab="Number of steps",cex=1, ylim=range(c(d_weekend$steps, d_weekdays$steps)))
plot(d_weekdays$interval, d_weekdays$steps, type="l", col="orange",main="Weekdays", xlab="Interval", ylab="Number of steps", cex=1, ylim=range(c(d_weekend$steps, d_weekdays$steps)))
## Conclusions:
##The activity level in the weekend is more irregular.
##weekdays are more regular in activity.
##In the weekend is much more activity around 800 minutes,
##so at around 1 pm.
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
abline(v=c(median(a$steps),mean(a$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
##Read and process the data - Cours 5, Project 1
Monitor<- read.csv("activity.csv")
## Sum steps per day
a<- aggregate(steps ~ date, Monitor, sum)
a$date <- as.Date(a$date)
## make a histogram of total number of steps by day
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
## mean and median number of steps taken each day
summary(a$steps)
## median is 10760 and mean = 10770
##average number of steps: show median and main
abline(v=c(median(a$steps),mean(a$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
b<- aggregate(steps ~ interval, Monitor, mean)
plot(b$interval, b$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
library(dplyr)
filter(b, steps==max(b$steps))
##interval    steps
##   835      206.1698
## The number of rows with missing values in the dataset
nrow(Monitor)-sum(complete.cases(Monitor))
## 2304
## A strategy for imputing missing values is to impute with
## the mean value of the same interval
library(plyr) ## probably not necessary
library(Hmisc) ## probably not necessary
Monitor2<- read.csv("activity.csv")
Monitor2$steps[is.na(Monitor2$steps)] <- ave(Monitor2$steps, Monitor2$interval,
FUN = function(x)
mean(x, na.rm = TRUE))[c(which(is.na(Monitor2$steps)))]
## Monitor2 is now the new dataset with missing data filled in
## Sum steps per day
c<- aggregate(steps ~ date, Monitor2, sum)
c$date <- as.Date(c$date)
## make a histogram of total number of steps by day
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## mean and median number of steps taken each day
summary(c$steps)
## median is 10770 (in stead of 10760 as before) and mean = 10770 (as before)
##average number of steps: show median and main
abline(v=c(median(c$steps),mean(c$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
d<- aggregate(steps ~ interval, Monitor2, mean)
plot(d$interval, d$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
filter(d, steps==max(d$steps))
##interval    steps
##   835      206.1698 (exactly the same as before)
## total number of steps taken with imputed data vs
# without imputed data
par(mfrow=c(1,2), mar=c(4,4,2,1))
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
##Read and process the data - Cours 5, Project 1
Monitor<- read.csv("activity.csv")
## Sum steps per day
a<- aggregate(steps ~ date, Monitor, sum)
a$date <- as.Date(a$date)
## make a histogram of total number of steps by day
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
## mean and median number of steps taken each day
summary(a$steps)
## median is 10760 and mean = 10770
##average number of steps: show median and main
abline(v=c(median(a$steps),mean(a$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
b<- aggregate(steps ~ interval, Monitor, mean)
plot(b$interval, b$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
library(dplyr)
filter(b, steps==max(b$steps))
##interval    steps
##   835      206.1698
## The number of rows with missing values in the dataset
nrow(Monitor)-sum(complete.cases(Monitor))
## 2304
## A strategy for imputing missing values is to impute with
## the mean value of the same interval
library(plyr) ## probably not necessary
library(Hmisc) ## probably not necessary
Monitor2<- read.csv("activity.csv")
Monitor2$steps[is.na(Monitor2$steps)] <- ave(Monitor2$steps, Monitor2$interval,
FUN = function(x)
mean(x, na.rm = TRUE))[c(which(is.na(Monitor2$steps)))]
## Monitor2 is now the new dataset with missing data filled in
## Sum steps per day
c<- aggregate(steps ~ date, Monitor2, sum)
c$date <- as.Date(c$date)
## make a histogram of total number of steps by day
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## mean and median number of steps taken each day
summary(c$steps)
## median is 10770 (in stead of 10760 as before) and mean = 10770 (as before)
##average number of steps: show median and main
abline(v=c(median(c$steps),mean(c$steps)), col=c("green", "blue"), lty=c(1,2), lwd=c(1, 3))
legend("right", bty = "n", lty=2,lwd=3,col=c("green","blue"),legend=c("median", "mean"), cex=0.7, y.intersp=0.1)
## time series plot of the average number of steps taken
d<- aggregate(steps ~ interval, Monitor2, mean)
plot(d$interval, d$steps, type="l", col="orange",main="Average steps per 5 min. time interval", xlab="time interval", ylab="average number of steps taken")
## which 5 minute interval contains the max number of steps on average?
filter(d, steps==max(d$steps))
##interval    steps
##   835      206.1698 (exactly the same as before)
## total number of steps taken with imputed data vs
# without imputed data
par(mfrow=c(1,2), mar=c(4,4,2,1))
hist(a$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="red", breaks=20)
hist(c$steps,
main=expression('total number of steps taken each day'),
xlab='number of steps', ylab="frequency",col="purple", breaks=20)
## The histograms show that imputing missing values results in
## a higher count for number of steps that has the highest occurance
## Create panel plot that compares average no. steps taken
## per 5 minute interval across weekdays and weekends.
## Add column with weekdays to the dataset with imputed values
Monitor2ex<- mutate(Monitor2,day=weekdays(c$date))
View(Monitor2ex)
Monitor2ex<- mutate(Monitor2,day=weekdays(Monitor2$date))
